image: ghcr.io/siemens/kas/kas:latest-release

stages:
  - prep
  - build

# Common job fragment to get a worker ready
.setup:
  stage: build
  interruptible: true
  variables:
    KAS_WORK_DIR: $CI_PROJECT_DIR/work
    KAS_REPO_REF_DIR: $CI_BUILDS_DIR/persist/repos
    SSTATE_DIR: $CI_BUILDS_DIR/persist/sstate
    DL_DIR: $CI_BUILDS_DIR/persist/downloads
    BB_LOGCONFIG: $CI_PROJECT_DIR/ci/logging.yml
    TOOLCHAIN_DIR: $CI_BUILDS_DIR/persist/toolchains
    IMAGE_DIR: $CI_PROJECT_DIR/work/build/tmp/deploy/images
    TOOLCHAIN_LINK_DIR: $CI_PROJECT_DIR/work/build/toolchains
  before_script:
    - echo KAS_WORK_DIR = $KAS_WORK_DIR
    - echo SSTATE_DIR = $SSTATE_DIR
    - echo DL_DIR = $DL_DIR
    - rm -rf $KAS_WORK_DIR
    - mkdir --verbose --parents $KAS_WORK_DIR $KAS_REPO_REF_DIR $SSTATE_DIR $DL_DIR $TOOLCHAIN_DIR $TOOLCHAIN_LINK_DIR

#
# Prep stage, update repositories once
#
update-repos:
  extends: .setup
  stage: prep
  script:
    - flock --verbose --timeout 60 $KAS_REPO_REF_DIR ./ci/update-repos

# Generate the downstream pipelines
linux-machine-config:
  stage: prep
  variables:
    TEST_LEVEL: $TEST_LEVEL
  script:
    - for i in $(grep -L "meta-zephyr\.yml" ci/*.yml | xargs -i grep machine {} | cut -d ':' -f 2 | sort -u | grep -v unset); do ./ci/generate-ci-config $i $TEST_LEVEL >> linux-machine-config.yml; done
  artifacts:
    paths:
      - linux-machine-config.yml
    expire_in: 1 day

rtos-machine-config:
  stage: prep
  script:
    # avoid combinations that do not work on Zephyr or TF-M
    - for i in $(grep -l "meta-zephyr\.yml" ci/*.yml | xargs -i grep machine {} | cut -d ':' -f 2 | sort -u | grep -v unset); do ./ci/generate-ci-config $i quick >> rtos-machine-config.yml; done
  artifacts:
    paths:
      - rtos-machine-config.yml
    expire_in: 1 day


#
# Build stage, the actual build jobs
#

linux-machine-pipeline:
  stage: build
  trigger:
    strategy: depend
    include:
      - artifact: linux-machine-config.yml
        job: linux-machine-config

rtos-machine-pipeline:
  stage: build
  trigger:
    strategy: depend
    include:
      - artifact: rtos-machine-config.yml
        job: rtos-machine-config

# Validate layers are Yocto Project Compatible
check-layers:
  extends: .setup
  script:
    - kas shell --update --force-checkout ci/base.yml:ci/meta-openembedded.yml --command \
      "yocto-check-layer-wrapper $CI_PROJECT_DIR/$LAYER --dependency $CI_PROJECT_DIR/meta-* $KAS_WORK_DIR/meta-openembedded/meta-oe --no-auto-dependency"
  parallel:
    matrix:
      - LAYER: [meta-arm, meta-arm-bsp, meta-arm-toolchain, meta-gem5]

# What percentage of machines in the layer do we build
machine-coverage:
  stage: build
  interruptible: true
  script:
    - ./ci/check-machine-coverage
  coverage: '/Coverage: \d+/'

pending-updates:
  extends: .setup
  artifacts:
    paths:
      - update-report
  script:
    - rm -fr update-report
    # This configuration has all of the layers we need enabled
    - kas shell ci/gem5-arm64.yml --command \
      "$CI_PROJECT_DIR/scripts/machine-summary.py -t report -o $CI_PROJECT_DIR/update-report $($CI_PROJECT_DIR/ci/listmachines.py meta-arm meta-arm-bsp meta-gem5)"
  # Do this on x86 whilst the compilers are x86-only
  tags:
    - x86_64

metrics:
  extends: .setup
  artifacts:
    reports:
      metrics: metrics.txt
  script:
    - kas shell --update --force-checkout ci/base.yml --command \
      "$CI_PROJECT_DIR/ci/patchreview $CI_PROJECT_DIR/meta-* --verbose --metrics $CI_PROJECT_DIR/metrics.txt"
